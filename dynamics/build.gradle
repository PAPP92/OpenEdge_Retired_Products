/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.1.1/userguide/tutorial_java_projects.html
 */
import oe.espresso.latte.* 
import java.time.*
import groovy.io.FileType
import groovy.json.*

plugins {
    id 'maven'
    id "com.jfrog.artifactory" version "4.10.0"
    id "oe.espresso.latte" version "0.3.1"
    id "application"
}

group 'com.progress.openedge'

String localDLC = System.getenv('DLC')
if (localDLC == null )                {throw new GradleException('DLC not set')}

// env.packageType
String packageType = System.getenv('packageType')
if (packageType == null) {packageType = 'tty'}
else                     {packageType = packageType.toLowerCase()}

// Determine the compiler options
// one or more of req-ret-val, req-full-kw, req-full-name, req-fld-qual can be used, in a comma-delimited value
String[] ablCompOpts = (project.hasProperty('ablCompilerOpts') ? project.property('ablCompilerOpts') : '').split(',')

// Global debug flag
Boolean dbgProp = (project.hasProperty('dbg') ? project.property('dbg') : 'false').toBoolean()

// Folder where dependencies are keps: PL (for rcode) and source code underneath, if needed
File ablLibs = file("$buildDir/lib")

// Folder for final distribution of code. You can change this to where you would like the code to end up
File distDir = file("dist")

// Should be in abl.pctTaskArgs but it has to be created first, otherwise we get a 'null' error
// the dir is created in ResolveOpenEdgeDependancies.doFirst
File avmTempDir = file("$buildDir/temp")

abl {
    dlcHome  = file(localDLC)
    rcodeDir = file("$buildDir/rcode")      // is the default; may not be needed
    graphicalMode = (packageType == 'gui')
    // dbConnections << "dictdb"
    pctTaskArgs {
        cpInternal = 'undefined'
        cpStream   = 'UTF-8'
        debugPCT = dbgProp
        keepXref = true
        xmlXref  = true
        compileUnderscore = true
        requireReturnValues    = ablCompOpts.contains('req-ret-val')
        requireFullKeywords    = ablCompOpts.contains('req-full-kw')
        requireFullNames       = ablCompOpts.contains('req-full-names')
        requireFieldQualifiers = ablCompOpts.contains('req-fld-qual')
    }
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    //jcenter()
}

dependencies {
    // dependancies go here
} 

configurations {

}

application {
    // Define the main class for the application.
    mainClassName = 'dynamics.App'
}

task ResolveOpenEdgeDependancies(){
    doFirst() {
        avmTempDir.mkdirs()
        ablLibs.mkdirs()
    }
    doLast{
        ant.copy (toDir : "$ablLibs" ) {
            plfileset (src : "${abl.dlcHome}/src/adecomm.pl" , includes : "**/*")
            plfileset (src : "${abl.dlcHome}/src/adeedit.pl" , includes : "**/*")
            plfileset (src : "${abl.dlcHome}/src/adedict.pl" , includes : "**/*")
        }
    }
}

task CreateICFDB(type: CreateDatabase) {
    dependsOn ResolveOpenEdgeDependancies

    outputs.dir("$buildDir/db")
    outputs.file("$buildDir/db/icf.db")

    dbName      = "icf"
    destDir     = "$buildDir/db"
    sourceDb    = "${abl.dlcHome}/empty"  
    multiTenant = false                   
    schemaFile  = "src/main/abl/db/icf/dfd/icfdbfull.df"
    doLast() {
        if (!file("$buildDir/db/ICF.db").exists() ) {
            throw new GradleException("$buildDir/db/ICF.db not created") 
        }
    }

}
task ConnectICFDB(type: DBConnection) {
    dependsOn CreateICFDB

    id         = 'icfdb'
    dbName     = 'icf'
    dbDir      = "$buildDir/db"
    singleUser = true
    alias("db_metaschema")
    alias("db_index")
    alias("ICFDB")
}

task compileCode(type: CompileAblTask) {
    dependsOn ConnectICFDB

    outputs.dir(abl.rcodeDir)

    compileArgs.tempDir             = avmTempDir.path
    compileArgs.centuryYearOffset   = "1950"
    compileArgs.token               = "1600"
    compileArgs.inputChars          = "18000"
    compileArgs.dirSize             = "150"
    compileArgs.maximumMemory       = "65534"
    compileArgs.stackSize           = "63"
    destinationDir                  = abl.rcodeDir       // in theory, can leave this to the default; in practice, not
    dbConnections << 'icfdb'
    source('src/main/abl')
    propath = files('src/main/abl',
                    'src/main/abl/af/sup2',
                    'src/main/abl/wrappers',
                    "${abl.dlcHome}/src",
                    "${abl.dlcHome}/$packageType",
                    "$ablLibs" )
    include('**/*.p')
    include('**/*.w')
    exclude('ry/tem/**')
    exclude('ry/obj/rylookupbv.w')
    exclude('ry/obj/ryoscompilev.w')
    exclude('ry/obj/rysdfcombv.w')
    exclude('ry/obj/rysdflkupv.w')
    exclude('af/obj2/gscemviewv.w')
    exclude('af/obj2/gsmmmimg1v.w')
    exclude('posselic.w')
    
    doLast{
        logWarnings(file("$buildDir/rcode/.pct/"), "compileCode")
    }
}
task packageCode(type: Copy){
    dependsOn compileCode
    doFirst{
        distDir.mkdirs()
    }
    from abl.rcodeDir
    into distDir
    exclude ".pct"
}
// write compiler warning to the build log
def logWarnings(File pctDir, String logGrp) {
    pctDir.traverse(type: FileType.FILES, nameFilter: ~/.*\.warnings/ )
        { logger.warn("[:$logGrp] " + it.text.trim()) }
}
defaultTasks 'packageCode'